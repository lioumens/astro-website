---

---
<div class="m-proof">
  <details class="m-proof--details">
    <summary class="m-proof--summary">
      <span class="m-proof--header">
        <em class="m-proof--title">Proof</em>
        <div class="m-proof--arrow"></div>
      </span>
    </summary>
    <div class="m-proof--content">
      <div class="m-proof--proof">

      Lorem ipsum dolor sit amet consectetur adipisicing elit. Alias iusto nulla suscipit eaque! Ducimus minima ratione molestias totam iure impedit cum veniam reiciendis iusto minus officiis officia, ipsum dignissimos esse.
      
      Lorem ipsum dolor sit amet consectetur adipisicing elit. Nisi exercitationem qui cum molestias, suscipit praesentium, quis dolores neque sapiente veniam id expedita debitis ducimus illo voluptatem quae? Velit, nulla quas!
      
      Lorem ipsum dolor sit amet consectetur adipisicing elit. Aliquam nemo aperiam ipsa odit aliquid ullam omnis autem quidem officiis incidunt dolorum, repudiandae qui necessitatibus quas, sint quo tempore earum? Molestias.

      Lorem ipsum dolor sit amet, consectetur adipisicing elit. Doloremque facilis atque officia obcaecati est dolores expedita eveniet iusto. Quas hic, quos cumque est nihil qui inventore asperiores eos unde quia!

      Lorem ipsum, dolor sit amet consectetur adipisicing elit. Debitis totam molestiae et cupiditate impedit dolore voluptatum tenetur temporibus eos. Libero quis soluta minima sint voluptatum at quasi error illum nemo!
      </div>
      <div class="m-proof--qed"></div>

    </div>
  </details>
</div>

<style lang="scss">
  .m-proof {
    margin: 2rem 2rem;
  }
  .m--proof--details {
    box-sizing: border-box;
    pointer-events: none;
    z-index: -1
  }
  .m-proof--header {
    cursor: pointer;
    border-bottom: 1px solid;
    border-image-slice: 1;
    border-image-source: linear-gradient(to bottom right, var(--nord7), var(--nord9) 100%);
    // border-right: 1px solid var(--nord6); // drawn after opening?
    padding-bottom: 3px; // mobile single pixel issue, include bottom border is 4. 
    margin-bottom: 0px;
    box-sizing: border-box;
    z-index: -1;
  }
  // animation was still showing flashes on mouse over
  .m-proof--details:not([open]) .m-proof--header:hover > .m-proof--arrow {
    animation: bounce 1s cubic-bezier(0.215, 0.610, 0.355, 1) infinite;
  }
  .m-proof--summary {
    /* pointer-events: none; */
    position: relative;
    list-style: none;
    padding: 0;
    margin: 0;

    &::-webkit-details-marker {
      display: none;
    }

  }
  .m-proof--title {
    padding-left: 1rem;
    padding-right: 1rem;
    padding-bottom: 3px; // mobile issue
    box-sizing: border-box;
    position: relative;
    color: var(--nord9);
    user-select: none;
    -webkit-user-select: none;
    
    &::after {
      box-sizing: inherit;
      content: "";
      border-bottom: 4px solid var(--nord1);
      position: absolute;
      height: 110%;
      width: 103%;
      right: -2px;
      bottom: -2px;
      // border-right: 2px solid red; // drawn after opening?
      // border-bottom: 2px solid red;
    }
    &.revealX::after {
      box-sizing: inherit;
      content: "";
      position: absolute;
      border-bottom: 4px solid red;
      height: 110%;
      width: 0%;
      left: 0px;
      bottom: -2px;
      z-index: 1;
      transition: width .4s ease-out;
      // border-right: 2px solid red; // drawn after opening?
      // border-bottom: 2px solid red;
    }
  }
  .m-proof--arrow {
    display: inline-block;
    position: absolute;
    left: 66px;
    top: 13px;
    height: 10px;
    width: 10px;
    border-top: .5rem solid var(--nord9);
    border-bottom: .5rem solid transparent;
    border-left: .3rem solid transparent;
    border-right: .3rem solid transparent;
    /* margin-bottom: -7px; */
    /* margin-left: 7px; */
    transform-origin: center 25%;
    z-index: 2;
    
    &.hidden {
      display: none;
    }
  }

  
  .m-proof--content {
    border-bottom: 1px solid;
    // opacity: 0;
    border-left: 1px solid;
    border-image-slice: 1;
    border-image-source: linear-gradient(to bottom right, var(--nord7), var(--nord10) 100%);
    padding-left: 2rem;
    padding-bottom: 1.5rem;
    position: relative; // needed for before pseudo element sytling
    padding-top: 4px;

    &::before {
      // box-sizing: inherit;
      content: "";
      border-left: 4px solid var(--nord1);
      border-bottom: 4px solid var(--nord1);
      // border-left: 2px solid red;
      // border-bottom: 2px solid red;
      position: absolute;
      right: 0px;
      bottom: -2px;
      width: 100%;
      height: 100%;
      z-index: 1;
    }
    &.revealY::before {
      content: "";
      border-left: 4px solid var(--nord1);
      border-bottom: 4px solid var(--nord1);
      // border-left: 2px solid red;
      // border-bottom: 2px solid red;
      position: absolute;
      right: 0px;
      bottom: -2px;
      width: 100%;
      height: 0%;
      z-index: 1;
      // transform: scaleY(0);
      transition: all .5s ease-out;
      // transition: transform 1s ease-in-out;
    }
    &.revealX::before {
      content: "";
      border-left: 4px solid var(--nord1);
      border-bottom: 4px solid var(--nord1);
      // border-left: 2px solid red;
      // border-bottom: 2px solid red;
      position: absolute;
      right:  0px;
      bottom: -2px;
      width: 0%;
      height: 0%;
      z-index: 1;
      // transform: scaleY(0);
      transition: all .5s ease-out;
    }
  }
  .m-proof--proof {
    &.revealContent {
      transform-origin: top center;
      perspective-origin: 50% 0%;
      animation: reveal .4s ease-out;
      // transition: transform .4s ease-out;
      // transition: opacity .4s ease-out;
      opacity:1;
    }
    &.hidden {
      opacity: 0;
    }
  }
  @keyframes reveal {
    0% {
      opacity: 0;
      // perspective: 500px;
      // transform: translateZ(0) translateY(-20px) rotateX(90deg)
    }
    100% {
      opacity: 100%;
      // perspective: 10px;
      // transform: translateZ(0) translateY(0px) rotateX(0deg)
    }
  }
  /* .m-proof--content::before {
    box-sizing: inherit;
    content: "dlfkjsdf";
    background: red;
    width: 100%;
    height: 100%;
  } */
  .m-proof--qed {
    height: .6rem;
    width: .6rem;
    background: var(--nord10);
    position: absolute;
    bottom: 0%;
    right: 0%;
    transform-origin: center center;
    transform: translate(50%, 50%);
    opacity: 1;
    z-index: 2;
    &.hidden {
      opacity: 0;
    }
  }
  @keyframes bounce {
    0% {
      transform: translateY(0) scale(1, 1);
    }
    50% {
      transform: translateY(-7px) scale(1.3, .7);
    }
    100% {
      transform: translateY(0) scale(1, 1);
    }
  }
</style>
<script lang="ts">
  const proof = document.querySelector('.m-proof--proof');
  const details = document.querySelector('.m-proof--details');
  const summary = document.querySelector('.m-proof--summary');
  const title = document.querySelector('.m-proof--title');
  const header = document.querySelector('.m-proof--header');
  const arrow = document.querySelector('.m-proof--arrow');
  const content = document.querySelector('.m-proof--content');
  const qed = document.querySelector('.m-proof--qed');
  
  details.addEventListener('click', (e) => {
    e.preventDefault();
  })
 
  let borderAnim1 = 0, borderAnim2 = 0, borderAnim3 = 0;
  let proofAnim = 0;
  header.addEventListener('click', (e) => {
    if (details.hasAttribute("open")) {
      document.getAnimations().forEach(anim => {
        anim.cancel();
      });
      details.removeAttribute("open");
      arrow.classList.remove('hidden');
      title.classList.remove('revealX');
      content.classList.remove('revealX');
      content.classList.remove('revealY');
      proof.classList.add("hidden")
      qed.classList.add('hidden');
      clearTimeout(borderAnim1)
      clearTimeout(borderAnim2)
      clearTimeout(borderAnim3)
      clearTimeout(proofAnim)
    } else {
      details.setAttribute("open", "");
      proof.classList.remove("hidden")
      
      const proofBox = proof.getBoundingClientRect();
      const contentBox = content.getBoundingClientRect();
      const summaryBox = summary.getBoundingClientRect();
      const arrowBox = arrow.getBoundingClientRect();
      const headerBox = header.getBoundingClientRect();
      const distDownToTop = (contentBox.top - headerBox.top) / 2;
      const distLeftToBorder = headerBox.right - contentBox.left;
      const distDownToBottom = contentBox.bottom - headerBox.bottom;
      
      
      // console.log("proof", proofBox)
      // console.log("arrow", arrowBox)
      // console.log("dist", distLeftToBorder)
      // console.log("content top", contentBox.top)
      // console.log("summary bottom", summaryBox.bottom)

      const proofReveal = proof.animate([
        {opacity: 0},
        {opacity: 1}
      ],{
        duration: 400,
        iterations: 1,
        easing: 'cubic-bezier(0.215, 0.610, 0.355, 1)',
      })
      
      const arrowMove = arrow.animate([
      { transform: 'rotate(0) '},
      { transform: `rotate(0) translateY(${distDownToTop}px)` },
      { transform: `translateY(${distDownToTop}px) rotate(90deg)` }, // rotate first before translate
      { transform: `translateX(-${distLeftToBorder}px) translateY(${distDownToTop}px) rotate(90deg)` },
      { transform: `translateX(-${distLeftToBorder}px) translateY(${distDownToTop}px)`},
      { transform: `translateX(-${distLeftToBorder}px) translateY(${distDownToTop + distDownToBottom}px)`},
      { transform: `translateX(-${distLeftToBorder}px) translateY(${distDownToTop + distDownToBottom}px) rotate(-90deg)`},
      { transform: `translateX(${-distLeftToBorder + contentBox.width}px) translateY(${distDownToTop + distDownToBottom}px) rotate(-90deg)`},
      ],
      {
        duration: 1500,
        iterations: 1,
        easing: 'cubic-bezier(0.215, 0.610, 0.355, 1)'
      })
      // must be less than 180 deg when composing transforms
      const arrowSpin = arrow.animate([
      { transform: `translateX(${-distLeftToBorder + contentBox.width}px) translateY(${distDownToTop + distDownToBottom}px) rotate(-90deg)`,
      opacity: "100%"},
      { transform: `translateX(${-distLeftToBorder + contentBox.width}px) translateY(${distDownToTop + distDownToBottom}px) rotate(0deg)`,
      opacity: "90%"},
      { transform: `translateX(${-distLeftToBorder + contentBox.width}px) translateY(${distDownToTop + distDownToBottom}px) rotate(90deg)`,
      opacity: "80%"},
      { transform: `translateX(${-distLeftToBorder + contentBox.width}px) translateY(${distDownToTop + distDownToBottom}px) rotate(180deg)`,
      opacity: "70%"},
      { transform: `translateX(${-distLeftToBorder + contentBox.width}px) translateY(${distDownToTop + distDownToBottom}px) rotate(270deg)`,
      opacity: "50%"},
      { transform: `translateX(${-distLeftToBorder + contentBox.width}px) translateY(${distDownToTop + distDownToBottom}px) rotate(360deg)`,
      opacity: "30%"},
      { transform: `translateX(${-distLeftToBorder + contentBox.width}px) translateY(${distDownToTop + distDownToBottom}px) rotate(450deg)`,
      opacity: "20%"},
      { transform: `translateX(${-distLeftToBorder + contentBox.width}px) translateY(${distDownToTop + distDownToBottom}px) rotate(540deg)`,
      opacity: "10%"},
      { transform: `translateX(${-distLeftToBorder + contentBox.width}px) translateY(${distDownToTop + distDownToBottom}px) rotate(630deg)`,
      opacity: "5%"},
      { transform: `translateX(${-distLeftToBorder + contentBox.width}px) translateY(${distDownToTop + distDownToBottom}px) rotate(720deg)`,
      opacity: "0%"},
      ],{
        duration: 1000,
        iterations: 1,
        delay: 1500,
        easing: 'cubic-bezier(0.215, 0.610, 0.355, 1)',
      })
      
      arrowSpin.onfinish = () => {
        arrow.classList.add("hidden")
      }

      // spin qed
      // issue with safari spinning more than 180deg
      // https://stackoverflow.com/questions/35186768/safari-css-bug-animation-rotation-direction-incorrect
      const qedSpin = qed.animate([
      {transform: "translate(50%, 50%) rotate(0)", opacity: 0},
      {transform: "translate(50%, 50%) rotate(90deg)", opacity: 1/7},
      {transform: "translate(50%, 50%) rotate(180deg)", opacity: 2/7},
      {transform: "translate(50%, 50%) rotate(270deg)", opacity: 3/7},
      {transform: "translate(50%, 50%) rotate(360deg)", opacity: 4/7},
      {transform: "translate(50%, 50%) rotate(540deg)", opacity: 5/7},
      {transform: "translate(50%, 50%) rotate(630deg)", opacity: 6/7},
      {transform: "translate(50%, 50%) rotate(720deg)", opacity: 1},
      ], {
        duration: 1000,
        iterations: 1,
        delay: 1500,
        easing: 'cubic-bezier(0.215, 0.610, 0.355, 1)',
      })

      qedSpin.onfinish = () => {
        qed.classList.remove("hidden")
      }
      
      // pseudoelement animation needs class approach, instead of direct animation
      // this needs to match class addition, otherwise interrupts transition
      // proofAnim = setTimeout(() => {
      // proof.classList.remove("notAnijmated")
      // proof.classList.add('revealContent');
      // }, 10) // timeout becuase animate code was using transformed coordinates
      borderAnim1 = setTimeout(() => {
      title.classList.add('revealX');
      }, 100)
      borderAnim2 = setTimeout(() => {
      content.classList.add('revealY');
      }, 500)
      borderAnim3 = setTimeout(() => {
        content.classList.add('revealX');
      }, 1000);
    };
    
  })
  
  
  
  
  
</script>
  
  
  